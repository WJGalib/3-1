
Data Memory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  0000018e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ba  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c7  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dd  00000000  00000000  00000ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000104  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000165b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <memory_reset>:
#define MEM_WRITE_	0x01

uint8_t MEMORY[1<<4] ;

void memory_reset() {
	for (int i=0; i<16; i++)
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	05 c0       	rjmp	.+10     	; 0x8c <memory_reset+0x10>
	MEMORY[i] = 0;
  82:	fc 01       	movw	r30, r24
  84:	e0 5a       	subi	r30, 0xA0	; 160
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	10 82       	st	Z, r1
#define MEM_WRITE_	0x01

uint8_t MEMORY[1<<4] ;

void memory_reset() {
	for (int i=0; i<16; i++)
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	80 31       	cpi	r24, 0x10	; 16
  8e:	91 05       	cpc	r25, r1
  90:	c4 f3       	brlt	.-16     	; 0x82 <memory_reset+0x6>
	MEMORY[i] = 0;
}
  92:	08 95       	ret

00000094 <main>:


int main(void)
{
MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  94:	80 e8       	ldi	r24, 0x80	; 128
  96:	84 bf       	out	0x34, r24	; 52
  98:	84 bf       	out	0x34, r24	; 52

DDRA = 0b11111000;	// A[0] - Memory Write | A[1] - Memory Read  | A[2] - Reset
  9a:	88 ef       	ldi	r24, 0xF8	; 248
  9c:	8a bb       	out	0x1a, r24	; 26
DDRB = 0x00;	// Address B[3:0] | Write Data B[7:4]
  9e:	17 ba       	out	0x17, r1	; 23

DDRC = 0xFF;	// C[3:0] - Data Read
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	84 bb       	out	0x14, r24	; 20

memory_reset();
  a4:	0e 94 3e 00 	call	0x7c	; 0x7c <memory_reset>

uint8_t current_control_input;
uint8_t current_write_data_address;
current_control_input = 0;
current_write_data_address = 0;
  a8:	d0 e0       	ldi	r29, 0x00	; 0

memory_reset();

uint8_t current_control_input;
uint8_t current_write_data_address;
current_control_input = 0;
  aa:	c0 e0       	ldi	r28, 0x00	; 0
current_write_data_address = 0;


while (1)
{
if(	(current_control_input != (PINA & 0b00000111)) || (current_write_data_address != PINB)){
  ac:	2c 2f       	mov	r18, r28
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	89 b3       	in	r24, 0x19	; 25
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	28 17       	cp	r18, r24
  b8:	39 07       	cpc	r19, r25
  ba:	19 f4       	brne	.+6      	; 0xc2 <main+0x2e>
  bc:	86 b3       	in	r24, 0x16	; 22
  be:	d8 17       	cp	r29, r24
  c0:	a9 f3       	breq	.-22     	; 0xac <main+0x18>
	current_control_input = PINA & 0b00000111;
  c2:	89 b3       	in	r24, 0x19	; 25
  c4:	c8 2f       	mov	r28, r24
  c6:	c7 70       	andi	r28, 0x07	; 7
	current_write_data_address = PINB;
  c8:	d6 b3       	in	r29, 0x16	; 22
	
	if (current_control_input & RESET_) {
  ca:	82 ff       	sbrs	r24, 2
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <main+0x4c>
		memory_reset();
  ce:	0e 94 3e 00 	call	0x7c	; 0x7c <memory_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	83 ed       	ldi	r24, 0xD3	; 211
  d4:	90 e3       	ldi	r25, 0x30	; 48
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x42>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x48>
  dc:	00 00       	nop
		_delay_ms(50);
		continue;
  de:	e6 cf       	rjmp	.-52     	; 0xac <main+0x18>
		} 
		
	 if (current_control_input & MEM_WRITE_) {			
  e0:	80 ff       	sbrs	r24, 0
  e2:	0f c0       	rjmp	.+30     	; 0x102 <main+0x6e>

			MEMORY[current_write_data_address & 0x0F] = (current_write_data_address >> 4);
  e4:	ed 2f       	mov	r30, r29
  e6:	ef 70       	andi	r30, 0x0F	; 15
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e0 5a       	subi	r30, 0xA0	; 160
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	9d 2f       	mov	r25, r29
  f0:	92 95       	swap	r25
  f2:	9f 70       	andi	r25, 0x0F	; 15
  f4:	90 83       	st	Z, r25
  f6:	e3 ed       	ldi	r30, 0xD3	; 211
  f8:	f0 e3       	ldi	r31, 0x30	; 48
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x66>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x6c>
 100:	00 00       	nop
			_delay_ms(50);
			
		}
		//_delay_ms(50);
	
	if (current_control_input & MEM_READ_) {
 102:	81 ff       	sbrs	r24, 1
 104:	d3 cf       	rjmp	.-90     	; 0xac <main+0x18>
		PORTC = MEMORY[current_write_data_address & 0x0F];
 106:	ed 2f       	mov	r30, r29
 108:	ef 70       	andi	r30, 0x0F	; 15
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e0 5a       	subi	r30, 0xA0	; 160
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 81       	ld	r24, Z
 112:	85 bb       	out	0x15, r24	; 21
 114:	cb cf       	rjmp	.-106    	; 0xac <main+0x18>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
