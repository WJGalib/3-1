Line# 1: Token <SINGLE LINE COMMENT> Lexeme // #include <stdio.h> found
Line# 2: Token <INT> Lexeme int found
type_specifier : INT 
Line# 2: Token <ID> Lexeme array found
Line# 2: Token <LSQUARE> Lexeme [ found
Line# 2: Token <CONST_INT> Lexeme 16 found
Line# 2: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 2: Token <COMMA> Lexeme , found
Line# 2: Token <ID> Lexeme fib_mem found
Line# 2: Token <LSQUARE> Lexeme [ found
Line# 2: Token <CONST_INT> Lexeme 24 found
Line# 2: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 2: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
unit : var_declaration 
program : unit 
Line# 3: Token <INT> Lexeme int found
type_specifier : INT 
Line# 3: Token <ID> Lexeme _j found
Line# 3: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 3: Token <ID> Lexeme number found
Line# 3: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 3: Token <ID> Lexeme WORD found
Line# 3: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 3: Token <ID> Lexeme word found
Line# 3: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
unit : var_declaration 
program : program unit 
Line# 5: Token <SINGLE LINE COMMENT> Lexeme // void println(int n) { found
Line# 6: Token <SINGLE LINE COMMENT> Lexeme //     printf("%d\n", n); found
Line# 7: Token <SINGLE LINE COMMENT> Lexeme // } found
Line# 9: Token <INT> Lexeme int found
type_specifier : INT 
Line# 9: Token <ID> Lexeme fibonacci found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <INT> Lexeme int found
type_specifier : INT 
Line# 9: Token <ID> Lexeme n found
parameter_list : type_specifier ID 
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <LCURL> Lexeme { found
Line# 10: Token <IF> Lexeme if found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <ID> Lexeme fib_mem found
Line# 10: Token <LSQUARE> Lexeme [ found
Line# 10: Token <ID> Lexeme n found
Line# 10: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 10: Token <RELOP> Lexeme != found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 10: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 10: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 10: Token <RETURN> Lexeme return found
Line# 10: Token <ID> Lexeme fib_mem found
Line# 10: Token <LSQUARE> Lexeme [ found
Line# 10: Token <ID> Lexeme n found
Line# 10: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 10: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
Line# 11: Token <IF> Lexeme if found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme n found
Line# 11: Token <RELOP> Lexeme == found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 11: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 11: Token <LOGICOP> Lexeme || found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
Line# 11: Token <ID> Lexeme n found
Line# 11: Token <RELOP> Lexeme == found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 11: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 11: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 
expression : logic_expression 
Line# 11: Token <LCURL> Lexeme { found
Line# 12: Token <ID> Lexeme fib_mem found
Line# 12: Token <LSQUARE> Lexeme [ found
Line# 12: Token <ID> Lexeme n found
Line# 12: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 12: Token <ASSIGNOP> Lexeme = found
Line# 12: Token <ID> Lexeme n found
Line# 12: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 13: Token <RETURN> Lexeme return found
Line# 13: Token <ID> Lexeme fib_mem found
Line# 13: Token <LSQUARE> Lexeme [ found
Line# 13: Token <ID> Lexeme n found
Line# 13: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 13: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 14: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 3
	ScopeTable# 2
	1--> <n, INT> 
	ScopeTable# 1
	2--> <fibonacci, FUNCTION, INT> 
	4--> <word, INT> 
	6--> <_j, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
Line# 15: Token <ID> Lexeme fib_mem found
statement : IF LPAREN expression RPAREN statement 
statements : statements statement 
Line# 15: Token <LSQUARE> Lexeme [ found
Line# 15: Token <ID> Lexeme n found
Line# 15: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 15: Token <ASSIGNOP> Lexeme = found
Line# 15: Token <ID> Lexeme fibonacci found
Line# 15: Token <LPAREN> Lexeme ( found
Line# 15: Token <ID> Lexeme n found
Line# 15: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 15: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 15: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 15: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 15: Token <ID> Lexeme fibonacci found
Line# 15: Token <LPAREN> Lexeme ( found
Line# 15: Token <ID> Lexeme n found
Line# 15: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 15: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 15: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 15: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 16: Token <RETURN> Lexeme return found
Line# 16: Token <ID> Lexeme fib_mem found
Line# 16: Token <LSQUARE> Lexeme [ found
Line# 16: Token <ID> Lexeme n found
Line# 16: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 16: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 17: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 2
	1--> <n, INT> 
	ScopeTable# 1
	2--> <fibonacci, FUNCTION, INT> 
	4--> <word, INT> 
	6--> <_j, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 19: Token <INT> Lexeme int found
type_specifier : INT 
Line# 19: Token <ID> Lexeme factorial found
Line# 19: Token <LPAREN> Lexeme ( found
Line# 19: Token <INT> Lexeme int found
type_specifier : INT 
Line# 19: Token <ID> Lexeme n found
parameter_list : type_specifier ID 
Line# 19: Token <RPAREN> Lexeme ) found
Line# 19: Token <LCURL> Lexeme { found
Line# 20: Token <IF> Lexeme if found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <ID> Lexeme n found
Line# 20: Token <RELOP> Lexeme == found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 20: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 20: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 20: Token <RETURN> Lexeme return found
Line# 20: Token <ID> Lexeme n found
Line# 20: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
Line# 21: Token <INT> Lexeme int found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
type_specifier : INT 
Line# 21: Token <ID> Lexeme k found
Line# 21: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 22: Token <ID> Lexeme k found
Line# 22: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 22: Token <ID> Lexeme n found
Line# 22: Token <MULOP> Lexeme * found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
Line# 22: Token <ID> Lexeme factorial found
Line# 22: Token <LPAREN> Lexeme ( found
Line# 22: Token <ID> Lexeme n found
Line# 22: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 22: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 22: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : term MULOP unary_expression 
Line# 22: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 23: Token <RETURN> Lexeme return found
Line# 23: Token <ID> Lexeme k found
Line# 23: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 24: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 4
	1--> <n, INT> 
	9--> <k, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	4--> <word, INT> 
	6--> <_j, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 26: Token <INT> Lexeme int found
type_specifier : INT 
Line# 26: Token <ID> Lexeme power found
Line# 26: Token <LPAREN> Lexeme ( found
Line# 26: Token <INT> Lexeme int found
type_specifier : INT 
Line# 26: Token <ID> Lexeme a found
parameter_list : type_specifier ID 
Line# 26: Token <COMMA> Lexeme , found
Line# 26: Token <INT> Lexeme int found
type_specifier : INT 
Line# 26: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID 
Line# 26: Token <RPAREN> Lexeme ) found
Line# 26: Token <LCURL> Lexeme { found
Line# 27: Token <IF> Lexeme if found
Line# 27: Token <LPAREN> Lexeme ( found
Line# 27: Token <ID> Lexeme b found
Line# 27: Token <RELOP> Lexeme == found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 27: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 27: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 27: Token <RETURN> Lexeme return found
Line# 27: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 27: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
Line# 28: Token <RETURN> Lexeme return found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
Line# 28: Token <ID> Lexeme a found
Line# 28: Token <MULOP> Lexeme * found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
Line# 28: Token <ID> Lexeme power found
Line# 28: Token <LPAREN> Lexeme ( found
Line# 28: Token <ID> Lexeme a found
Line# 28: Token <COMMA> Lexeme , found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 28: Token <ID> Lexeme b found
Line# 28: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 28: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 28: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : term MULOP unary_expression 
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 29: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 5
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> 
	6--> <_j, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 31: Token <VOID> Lexeme void found
type_specifier : VOID 
Line# 31: Token <ID> Lexeme merge found
Line# 31: Token <LPAREN> Lexeme ( found
Line# 31: Token <INT> Lexeme int found
type_specifier : INT 
Line# 31: Token <ID> Lexeme begin found
parameter_list : type_specifier ID 
Line# 31: Token <COMMA> Lexeme , found
Line# 31: Token <INT> Lexeme int found
type_specifier : INT 
Line# 31: Token <ID> Lexeme mid found
parameter_list : parameter_list COMMA type_specifier ID 
Line# 31: Token <COMMA> Lexeme , found
Line# 31: Token <INT> Lexeme int found
type_specifier : INT 
Line# 31: Token <ID> Lexeme end found
parameter_list : parameter_list COMMA type_specifier ID 
Line# 31: Token <RPAREN> Lexeme ) found
Line# 31: Token <LCURL> Lexeme { found
Line# 32: Token <INT> Lexeme int found
type_specifier : INT 
Line# 32: Token <ID> Lexeme i found
Line# 32: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 32: Token <ID> Lexeme j found
Line# 32: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 33: Token <INT> Lexeme int found
type_specifier : INT 
Line# 33: Token <ID> Lexeme temp found
Line# 33: Token <LSQUARE> Lexeme [ found
Line# 33: Token <CONST_INT> Lexeme 16 found
Line# 33: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 33: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 34: Token <ID> Lexeme i found
Line# 34: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 34: Token <ID> Lexeme begin found
Line# 34: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 35: Token <ID> Lexeme j found
Line# 35: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 35: Token <ID> Lexeme mid found
Line# 35: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 35: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 35: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 36: Token <INT> Lexeme int found
type_specifier : INT 
Line# 36: Token <ID> Lexeme counter found
Line# 36: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 37: Token <ID> Lexeme counter found
Line# 37: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 37: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 37: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 39: Token <FOR> Lexeme for found
Line# 39: Token <LPAREN> Lexeme ( found
Line# 39: Token <ID> Lexeme counter found
Line# 39: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 39: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 39: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 39: Token <ID> Lexeme counter found
Line# 39: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 39: Token <LPAREN> Lexeme ( found
Line# 39: Token <ID> Lexeme end found
Line# 39: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 39: Token <ID> Lexeme begin found
Line# 39: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : simple_expression ADDOP term 
Line# 39: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 39: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
factor : LPAREN expression RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 39: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 39: Token <ID> Lexeme counter found
Line# 39: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 39: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 39: Token <LCURL> Lexeme { found
Line# 40: Token <IF> Lexeme if found
Line# 40: Token <LPAREN> Lexeme ( found
Line# 40: Token <ID> Lexeme i found
Line# 40: Token <RELOP> Lexeme > found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 40: Token <ID> Lexeme mid found
Line# 40: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 40: Token <ID> Lexeme temp found
Line# 40: Token <LSQUARE> Lexeme [ found
Line# 40: Token <ID> Lexeme counter found
Line# 40: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 40: Token <ASSIGNOP> Lexeme = found
Line# 40: Token <ID> Lexeme array found
Line# 40: Token <LSQUARE> Lexeme [ found
Line# 40: Token <ID> Lexeme j found
Line# 40: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 40: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 40: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
Line# 41: Token <ELSE> Lexeme else found
Line# 41: Token <IF> Lexeme if found
Line# 41: Token <LPAREN> Lexeme ( found
Line# 41: Token <ID> Lexeme j found
Line# 41: Token <RELOP> Lexeme > found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 41: Token <ID> Lexeme end found
Line# 41: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 41: Token <ID> Lexeme temp found
Line# 41: Token <LSQUARE> Lexeme [ found
Line# 41: Token <ID> Lexeme counter found
Line# 41: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 41: Token <ASSIGNOP> Lexeme = found
Line# 41: Token <ID> Lexeme array found
Line# 41: Token <LSQUARE> Lexeme [ found
Line# 41: Token <ID> Lexeme i found
Line# 41: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 41: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 41: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
Line# 42: Token <ELSE> Lexeme else found
Line# 42: Token <IF> Lexeme if found
Line# 42: Token <LPAREN> Lexeme ( found
Line# 42: Token <ID> Lexeme array found
Line# 42: Token <LSQUARE> Lexeme [ found
Line# 42: Token <ID> Lexeme i found
Line# 42: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 42: Token <RELOP> Lexeme <= found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 42: Token <ID> Lexeme array found
Line# 42: Token <LSQUARE> Lexeme [ found
Line# 42: Token <ID> Lexeme j found
Line# 42: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 42: Token <RPAREN> Lexeme ) found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 42: Token <ID> Lexeme temp found
Line# 42: Token <LSQUARE> Lexeme [ found
Line# 42: Token <ID> Lexeme counter found
Line# 42: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 42: Token <ASSIGNOP> Lexeme = found
Line# 42: Token <ID> Lexeme array found
Line# 42: Token <LSQUARE> Lexeme [ found
Line# 42: Token <ID> Lexeme i found
Line# 42: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 42: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 42: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
Line# 43: Token <ELSE> Lexeme else found
Line# 43: Token <ID> Lexeme temp found
Line# 43: Token <LSQUARE> Lexeme [ found
Line# 43: Token <ID> Lexeme counter found
Line# 43: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 43: Token <ASSIGNOP> Lexeme = found
Line# 43: Token <ID> Lexeme array found
Line# 43: Token <LSQUARE> Lexeme [ found
Line# 43: Token <ID> Lexeme j found
Line# 43: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 43: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 43: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statements : statement 
Line# 44: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 7
	ScopeTable# 6
	1--> <temp, ARRAY, INT> 
	2--> <mid, INT> 
	4--> <begin, INT> 
	6--> <counter, INT> 
	7--> <i, INT> 
	8--> <end, INT> <j, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 46: Token <FOR> Lexeme for found
Line# 46: Token <LPAREN> Lexeme ( found
Line# 46: Token <ID> Lexeme counter found
Line# 46: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 46: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 46: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 46: Token <ID> Lexeme counter found
Line# 46: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 46: Token <LPAREN> Lexeme ( found
Line# 46: Token <ID> Lexeme end found
Line# 46: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 46: Token <ID> Lexeme begin found
Line# 46: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : simple_expression ADDOP term 
Line# 46: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 46: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
factor : LPAREN expression RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 46: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 46: Token <ID> Lexeme counter found
Line# 46: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 46: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 46: Token <LCURL> Lexeme { found
Line# 47: Token <ID> Lexeme array found
Line# 47: Token <LSQUARE> Lexeme [ found
Line# 47: Token <ID> Lexeme begin found
Line# 47: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 47: Token <ID> Lexeme counter found
Line# 47: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 47: Token <ASSIGNOP> Lexeme = found
Line# 47: Token <ID> Lexeme temp found
Line# 47: Token <LSQUARE> Lexeme [ found
Line# 47: Token <ID> Lexeme counter found
Line# 47: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 47: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 48: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 8
	ScopeTable# 6
	1--> <temp, ARRAY, INT> 
	2--> <mid, INT> 
	4--> <begin, INT> 
	6--> <counter, INT> 
	7--> <i, INT> 
	8--> <end, INT> <j, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 49: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 6
	1--> <temp, ARRAY, INT> 
	2--> <mid, INT> 
	4--> <begin, INT> 
	6--> <counter, INT> 
	7--> <i, INT> 
	8--> <end, INT> <j, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 51: Token <INT> Lexeme int found
type_specifier : INT 
Line# 51: Token <ID> Lexeme mergeSort found
Line# 51: Token <LPAREN> Lexeme ( found
Line# 51: Token <INT> Lexeme int found
type_specifier : INT 
Line# 51: Token <ID> Lexeme begin found
parameter_list : type_specifier ID 
Line# 51: Token <COMMA> Lexeme , found
Line# 51: Token <INT> Lexeme int found
type_specifier : INT 
Line# 51: Token <ID> Lexeme end found
parameter_list : parameter_list COMMA type_specifier ID 
Line# 51: Token <RPAREN> Lexeme ) found
Line# 51: Token <LCURL> Lexeme { found
Line# 52: Token <IF> Lexeme if found
Line# 52: Token <LPAREN> Lexeme ( found
Line# 52: Token <ID> Lexeme begin found
Line# 52: Token <RELOP> Lexeme >= found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 52: Token <ID> Lexeme end found
Line# 52: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 53: Token <RETURN> Lexeme return found
Line# 53: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 53: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
Line# 55: Token <INT> Lexeme int found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
type_specifier : INT 
Line# 55: Token <ID> Lexeme mid found
Line# 55: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 56: Token <ID> Lexeme mid found
Line# 56: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 56: Token <ID> Lexeme begin found
Line# 56: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 56: Token <LPAREN> Lexeme ( found
Line# 56: Token <ID> Lexeme end found
Line# 56: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 56: Token <ID> Lexeme begin found
Line# 56: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
factor : LPAREN expression RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 56: Token <MULOP> Lexeme / found
Line# 56: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor 
term : term MULOP unary_expression 
Line# 56: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 57: Token <ID> Lexeme mergeSort found
Line# 57: Token <LPAREN> Lexeme ( found
Line# 57: Token <ID> Lexeme begin found
Line# 57: Token <COMMA> Lexeme , found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 57: Token <ID> Lexeme mid found
Line# 57: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 57: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 58: Token <ID> Lexeme mergeSort found
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <ID> Lexeme mid found
Line# 58: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 58: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 58: Token <COMMA> Lexeme , found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 58: Token <ID> Lexeme end found
Line# 58: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 58: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 59: Token <ID> Lexeme merge found
Line# 59: Token <LPAREN> Lexeme ( found
Line# 59: Token <ID> Lexeme begin found
Line# 59: Token <COMMA> Lexeme , found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 59: Token <ID> Lexeme mid found
Line# 59: Token <COMMA> Lexeme , found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
Line# 59: Token <ID> Lexeme end found
Line# 59: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 59: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 60: Token <RETURN> Lexeme return found
Line# 60: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 60: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 61: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 9
	2--> <mid, INT> 
	4--> <begin, INT> 
	8--> <end, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 63: Token <INT> Lexeme int found
type_specifier : INT 
Line# 63: Token <ID> Lexeme MERGE found
Line# 63: Token <LPAREN> Lexeme ( found
Line# 63: Token <RPAREN> Lexeme ) found
Line# 63: Token <LCURL> Lexeme { found
Line# 64: Token <ID> Lexeme number found
Line# 64: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 64: Token <ADDOP> Lexeme - found
Line# 64: Token <CONST_INT> Lexeme 15000 found
factor : CONST_INT 
unary_expression : factor 
unary_expression : ADDOP unary_expression 
term : unary_expression 
Line# 64: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 65: Token <PRINTLN> Lexeme println found
Line# 65: Token <LPAREN> Lexeme ( found
Line# 65: Token <ID> Lexeme number found
Line# 65: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 65: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 66: Token <RETURN> Lexeme return found
Line# 66: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 66: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 67: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 10
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 69: Token <INT> Lexeme int found
type_specifier : INT 
Line# 69: Token <ID> Lexeme loop_test found
Line# 69: Token <LPAREN> Lexeme ( found
Line# 69: Token <RPAREN> Lexeme ) found
Line# 69: Token <LCURL> Lexeme { found
Line# 70: Token <INT> Lexeme int found
type_specifier : INT 
Line# 70: Token <ID> Lexeme i found
Line# 70: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 71: Token <FOR> Lexeme for found
Line# 71: Token <LPAREN> Lexeme ( found
Line# 71: Token <ID> Lexeme i found
Line# 71: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 71: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 71: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 71: Token <ID> Lexeme i found
Line# 71: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 71: Token <CONST_INT> Lexeme 100 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 71: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 71: Token <ID> Lexeme i found
Line# 71: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 71: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 71: Token <LCURL> Lexeme { found
Line# 72: Token <INT> Lexeme int found
type_specifier : INT 
Line# 72: Token <ID> Lexeme k found
Line# 72: Token <LSQUARE> Lexeme [ found
Line# 72: Token <CONST_INT> Lexeme 100 found
Line# 72: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 72: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 73: Token <ID> Lexeme k found
Line# 73: Token <LSQUARE> Lexeme [ found
Line# 73: Token <CONST_INT> Lexeme 97 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 73: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 73: Token <ASSIGNOP> Lexeme = found
Line# 73: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 73: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 74: Token <ID> Lexeme k found
Line# 74: Token <LSQUARE> Lexeme [ found
Line# 74: Token <CONST_INT> Lexeme 98 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 74: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 74: Token <ASSIGNOP> Lexeme = found
Line# 74: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 74: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 75: Token <ID> Lexeme k found
Line# 75: Token <LSQUARE> Lexeme [ found
Line# 75: Token <CONST_INT> Lexeme 99 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 75: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 75: Token <ASSIGNOP> Lexeme = found
Line# 75: Token <ID> Lexeme k found
Line# 75: Token <LSQUARE> Lexeme [ found
Line# 75: Token <CONST_INT> Lexeme 98 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 75: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 75: Token <ADDOP> Lexeme + found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 75: Token <ID> Lexeme k found
Line# 75: Token <LSQUARE> Lexeme [ found
Line# 75: Token <CONST_INT> Lexeme 97 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 75: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 75: Token <ADDOP> Lexeme + found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : simple_expression ADDOP term 
Line# 75: Token <CONST_INT> Lexeme 111 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 75: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 76: Token <IF> Lexeme if found
Line# 76: Token <LPAREN> Lexeme ( found
Line# 76: Token <ID> Lexeme i found
Line# 76: Token <RELOP> Lexeme == found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 76: Token <CONST_INT> Lexeme 97 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 76: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 76: Token <LCURL> Lexeme { found
Line# 77: Token <INT> Lexeme int found
type_specifier : INT 
Line# 77: Token <ID> Lexeme temp found
Line# 77: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 78: Token <ID> Lexeme temp found
Line# 78: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 78: Token <ID> Lexeme k found
Line# 78: Token <LSQUARE> Lexeme [ found
Line# 78: Token <CONST_INT> Lexeme 99 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 78: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 78: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 79: Token <PRINTLN> Lexeme println found
Line# 79: Token <LPAREN> Lexeme ( found
Line# 79: Token <ID> Lexeme temp found
Line# 79: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 79: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 80: Token <RETURN> Lexeme return found
Line# 80: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 80: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 81: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 13
	1--> <temp, INT> 
	ScopeTable# 12
	9--> <k, ARRAY, INT> 
	ScopeTable# 11
	7--> <i, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	3--> <loop_test, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
Line# 82: Token <RCURL> Lexeme } found
statement : IF LPAREN expression RPAREN statement 
statements : statements statement 
compound_statement : LCURL statements RCURL 
	ScopeTable# 12
	9--> <k, ARRAY, INT> 
	ScopeTable# 11
	7--> <i, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	3--> <loop_test, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 83: Token <PRINTLN> Lexeme println found
Line# 83: Token <LPAREN> Lexeme ( found
Line# 83: Token <ID> Lexeme i found
Line# 83: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 83: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 84: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 11
	7--> <i, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> 
	3--> <loop_test, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 86: Token <VOID> Lexeme void found
type_specifier : VOID 
Line# 86: Token <ID> Lexeme main found
Line# 86: Token <LPAREN> Lexeme ( found
Line# 86: Token <RPAREN> Lexeme ) found
Line# 86: Token <LCURL> Lexeme { found
Line# 87: Token <SINGLE LINE COMMENT> Lexeme // freopen("output.txt", "w", stdout); found
Line# 88: Token <INT> Lexeme int found
type_specifier : INT 
Line# 88: Token <ID> Lexeme i found
Line# 88: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 88: Token <ID> Lexeme a found
Line# 88: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 88: Token <ID> Lexeme b found
Line# 88: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 89: Token <ID> Lexeme a found
Line# 89: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 89: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 89: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 90: Token <ID> Lexeme b found
Line# 90: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 90: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 90: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 91: Token <ID> Lexeme number found
Line# 91: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 91: Token <ID> Lexeme power found
Line# 91: Token <LPAREN> Lexeme ( found
Line# 91: Token <ID> Lexeme a found
Line# 91: Token <COMMA> Lexeme , found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 91: Token <ID> Lexeme b found
Line# 91: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 91: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 92: Token <PRINTLN> Lexeme println found
Line# 92: Token <LPAREN> Lexeme ( found
Line# 92: Token <ID> Lexeme number found
Line# 92: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 92: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 93: Token <ID> Lexeme number found
Line# 93: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 93: Token <ID> Lexeme factorial found
Line# 93: Token <LPAREN> Lexeme ( found
Line# 93: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 93: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 93: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 94: Token <PRINTLN> Lexeme println found
Line# 94: Token <LPAREN> Lexeme ( found
Line# 94: Token <ID> Lexeme number found
Line# 94: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 94: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 95: Token <ID> Lexeme loop_test found
Line# 95: Token <LPAREN> Lexeme ( found
Line# 95: Token <RPAREN> Lexeme ) found
argument_list : 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 95: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 97: Token <FOR> Lexeme for found
Line# 97: Token <LPAREN> Lexeme ( found
Line# 97: Token <ID> Lexeme i found
Line# 97: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 97: Token <CONST_INT> Lexeme 15 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 97: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 97: Token <ID> Lexeme i found
Line# 97: Token <RELOP> Lexeme >= found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 97: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 97: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 97: Token <ID> Lexeme i found
Line# 97: Token <DECOP> Lexeme -- found
variable : ID 
factor : variable DECOP 
unary_expression : factor 
term : unary_expression 
Line# 97: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 98: Token <ID> Lexeme array found
Line# 98: Token <LSQUARE> Lexeme [ found
Line# 98: Token <ID> Lexeme i found
Line# 98: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 98: Token <ASSIGNOP> Lexeme = found
Line# 98: Token <ADDOP> Lexeme - found
Line# 98: Token <CONST_INT> Lexeme 17000 found
factor : CONST_INT 
unary_expression : factor 
unary_expression : ADDOP unary_expression 
term : unary_expression 
Line# 98: Token <ADDOP> Lexeme - found
simple_expression : term 
Line# 98: Token <CONST_INT> Lexeme 1000 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 98: Token <MULOP> Lexeme * found
Line# 98: Token <ID> Lexeme i found
Line# 98: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : term MULOP unary_expression 
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 99: Token <ID> Lexeme i found
Line# 99: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 99: Token <CONST_INT> Lexeme 16 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 99: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 100: Token <WHILE> Lexeme while found
Line# 100: Token <LPAREN> Lexeme ( found
Line# 100: Token <ID> Lexeme i found
Line# 100: Token <DECOP> Lexeme -- found
variable : ID 
factor : variable DECOP 
unary_expression : factor 
term : unary_expression 
Line# 100: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 100: Token <LCURL> Lexeme { found
Line# 101: Token <INT> Lexeme int found
type_specifier : INT 
Line# 101: Token <ID> Lexeme temp found
Line# 101: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 102: Token <ID> Lexeme temp found
Line# 102: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 102: Token <ID> Lexeme array found
Line# 102: Token <LSQUARE> Lexeme [ found
Line# 102: Token <CONST_INT> Lexeme 15 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 102: Token <ADDOP> Lexeme - found
simple_expression : term 
Line# 102: Token <ID> Lexeme i found
Line# 102: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 102: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 103: Token <PRINTLN> Lexeme println found
Line# 103: Token <LPAREN> Lexeme ( found
Line# 103: Token <ID> Lexeme temp found
Line# 103: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 103: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 104: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 15
	1--> <temp, INT> 
	ScopeTable# 14
	7--> <i, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> <main, FUNCTION, VOID> 
	3--> <loop_test, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement 
statements : statements statement 
Line# 106: Token <PRINTLN> Lexeme println found
Line# 106: Token <LPAREN> Lexeme ( found
Line# 106: Token <ID> Lexeme i found
Line# 106: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 106: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 107: Token <ID> Lexeme a found
Line# 107: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 107: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 107: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 108: Token <ID> Lexeme b found
Line# 108: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 108: Token <CONST_INT> Lexeme 15 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 108: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 109: Token <ID> Lexeme mergeSort found
Line# 109: Token <LPAREN> Lexeme ( found
Line# 109: Token <ID> Lexeme a found
Line# 109: Token <COMMA> Lexeme , found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 109: Token <ID> Lexeme b found
Line# 109: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 109: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 111: Token <FOR> Lexeme for found
Line# 111: Token <LPAREN> Lexeme ( found
Line# 111: Token <ID> Lexeme i found
Line# 111: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 111: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 111: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 111: Token <ID> Lexeme i found
Line# 111: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 111: Token <CONST_INT> Lexeme 16 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 111: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 111: Token <ID> Lexeme i found
Line# 111: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 111: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 111: Token <LCURL> Lexeme { found
Line# 112: Token <IF> Lexeme if found
Line# 112: Token <LPAREN> Lexeme ( found
Line# 112: Token <ID> Lexeme i found
Line# 112: Token <RELOP> Lexeme >= found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 112: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 112: Token <LOGICOP> Lexeme || found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
Line# 112: Token <ID> Lexeme MERGE found
Line# 112: Token <LPAREN> Lexeme ( found
Line# 112: Token <RPAREN> Lexeme ) found
argument_list : 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 112: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 
expression : logic_expression 
Line# 112: Token <LCURL> Lexeme { found
Line# 113: Token <ID> Lexeme WORD found
Line# 113: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 113: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 113: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 114: Token <ID> Lexeme WORD found
Line# 114: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 114: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 114: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 115: Token <ID> Lexeme WORD found
Line# 115: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 115: Token <ID> Lexeme array found
Line# 115: Token <LSQUARE> Lexeme [ found
Line# 115: Token <ID> Lexeme i found
Line# 115: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 115: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 116: Token <PRINTLN> Lexeme println found
Line# 116: Token <LPAREN> Lexeme ( found
Line# 116: Token <ID> Lexeme WORD found
Line# 116: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 116: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 117: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 17
	ScopeTable# 16
	ScopeTable# 14
	7--> <i, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> <main, FUNCTION, VOID> 
	3--> <loop_test, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
Line# 118: Token <RCURL> Lexeme } found
statement : IF LPAREN expression RPAREN statement 
statements : statement 
compound_statement : LCURL statements RCURL 
	ScopeTable# 16
	ScopeTable# 14
	7--> <i, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> <main, FUNCTION, VOID> 
	3--> <loop_test, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 119: Token <FOR> Lexeme for found
Line# 119: Token <LPAREN> Lexeme ( found
Line# 119: Token <ID> Lexeme i found
Line# 119: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 119: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 119: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 119: Token <ID> Lexeme i found
Line# 119: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 119: Token <CONST_INT> Lexeme 16 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 119: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 119: Token <ID> Lexeme i found
Line# 119: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 119: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 120: Token <IF> Lexeme if found
Line# 120: Token <LPAREN> Lexeme ( found
Line# 120: Token <ID> Lexeme i found
Line# 120: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 120: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 120: Token <LOGICOP> Lexeme && found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
Line# 120: Token <ID> Lexeme MERGE found
Line# 120: Token <LPAREN> Lexeme ( found
Line# 120: Token <RPAREN> Lexeme ) found
argument_list : 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 120: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 
expression : logic_expression 
Line# 120: Token <LCURL> Lexeme { found
Line# 121: Token <ID> Lexeme _j found
Line# 121: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 121: Token <ID> Lexeme array found
Line# 121: Token <LSQUARE> Lexeme [ found
Line# 121: Token <ID> Lexeme i found
Line# 121: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 121: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 122: Token <PRINTLN> Lexeme println found
Line# 122: Token <LPAREN> Lexeme ( found
Line# 122: Token <ID> Lexeme _j found
Line# 122: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 122: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 123: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 18
	ScopeTable# 14
	7--> <i, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> <main, FUNCTION, VOID> 
	3--> <loop_test, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
Line# 125: Token <ID> Lexeme word found
statement : IF LPAREN expression RPAREN statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 125: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 125: Token <CONST_INT> Lexeme 200 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 125: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 126: Token <PRINTLN> Lexeme println found
Line# 126: Token <LPAREN> Lexeme ( found
Line# 126: Token <ID> Lexeme word found
Line# 126: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 126: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 127: Token <ID> Lexeme fibonacci found
Line# 127: Token <LPAREN> Lexeme ( found
Line# 127: Token <CONST_INT> Lexeme 23 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 127: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 127: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 128: Token <FOR> Lexeme for found
Line# 128: Token <LPAREN> Lexeme ( found
Line# 128: Token <ID> Lexeme i found
Line# 128: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 128: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 128: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 128: Token <ID> Lexeme i found
Line# 128: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 128: Token <CONST_INT> Lexeme 24 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 128: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 128: Token <ID> Lexeme i found
Line# 128: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 128: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 128: Token <LCURL> Lexeme { found
Line# 129: Token <INT> Lexeme int found
type_specifier : INT 
Line# 129: Token <ID> Lexeme temp found
Line# 129: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 130: Token <ID> Lexeme temp found
Line# 130: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 130: Token <ID> Lexeme fib_mem found
Line# 130: Token <LSQUARE> Lexeme [ found
Line# 130: Token <ID> Lexeme i found
Line# 130: Token <RSQUARE> Lexeme ] found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 130: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 131: Token <PRINTLN> Lexeme println found
Line# 131: Token <LPAREN> Lexeme ( found
Line# 131: Token <ID> Lexeme temp found
Line# 131: Token <RPAREN> Lexeme ) found
variable : ID 
Line# 131: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN variable RPAREN SEMICOLON 
statements : statements statement 
Line# 132: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 19
	1--> <temp, INT> 
	ScopeTable# 14
	7--> <i, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> <main, FUNCTION, VOID> 
	3--> <loop_test, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 133: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 14
	7--> <i, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	1--> <factorial, FUNCTION, INT> 
	2--> <fibonacci, FUNCTION, INT> <main, FUNCTION, VOID> 
	3--> <loop_test, FUNCTION, INT> 
	4--> <word, INT> <power, FUNCTION, INT> <MERGE, FUNCTION, INT> 
	5--> <merge, FUNCTION, VOID> 
	6--> <_j, INT> <mergeSort, FUNCTION, INT> 
	8--> <number, INT> 
	10--> <array, ARRAY, INT> <fib_mem, ARRAY, INT> <WORD, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
start : program 
Total Lines: 133
Total Errors: 0
