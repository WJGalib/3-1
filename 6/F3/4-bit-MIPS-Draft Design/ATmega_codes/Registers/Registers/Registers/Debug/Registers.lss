
Registers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d0  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005cb  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  00000efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000376  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000145  00000000  00000000  0000156a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
uint8_t REGISTER[8] = {0}; //all registers 0


int main(void)
{
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	84 bf       	out	0x34, r24	; 52
  80:	84 bf       	out	0x34, r24	; 52

	DDRA = 0b00000000;	// A[3:0] - SrcReg1, A[7:4] - SrcReg2
  82:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0b00000000;	// B[3:0] - DstReg, B[7:4] - Write Data
  84:	17 ba       	out	0x17, r1	; 23

	DDRC = 0b11111111;	// C[3:0] - $1, C[7:4] - $2
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111100;	// D[0] - WriteReg, D[1] - RESET
  8a:	8c ef       	ldi	r24, 0xFC	; 252
  8c:	81 bb       	out	0x11, r24	; 17
	//PORTA = 0xff;
	//PORTB = 0xff;
	uint8_t src, dst_data, current_control = 0x02;
	src = PINA; //src1,2
  8e:	59 b3       	in	r21, 0x19	; 25
	dst_data = PINB;  //dstreg, writedata
  90:	a6 b3       	in	r26, 0x16	; 22

	DDRC = 0b11111111;	// C[3:0] - $1, C[7:4] - $2
	DDRD = 0b11111100;	// D[0] - WriteReg, D[1] - RESET
	//PORTA = 0xff;
	//PORTB = 0xff;
	uint8_t src, dst_data, current_control = 0x02;
  92:	42 e0       	ldi	r20, 0x02	; 2
	src = PINA; //src1,2
	dst_data = PINB;  //dstreg, writedata

	while (1)
	{
		if((current_control != (PIND&0b00000011)) || (dst_data != PINB) || (src != PINA)){
  94:	24 2f       	mov	r18, r20
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	80 b3       	in	r24, 0x10	; 16
  9a:	83 70       	andi	r24, 0x03	; 3
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	28 17       	cp	r18, r24
  a0:	39 07       	cpc	r19, r25
  a2:	31 f4       	brne	.+12     	; 0xb0 <main+0x34>
  a4:	86 b3       	in	r24, 0x16	; 22
  a6:	a8 13       	cpse	r26, r24
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <main+0x34>
  aa:	89 b3       	in	r24, 0x19	; 25
  ac:	58 17       	cp	r21, r24
  ae:	91 f3       	breq	.-28     	; 0x94 <main+0x18>
			current_control = PIND&0b00000011;
  b0:	80 b3       	in	r24, 0x10	; 16
  b2:	48 2f       	mov	r20, r24
  b4:	43 70       	andi	r20, 0x03	; 3
			src = PINA; //src1,2
  b6:	59 b3       	in	r21, 0x19	; 25
			
			
			if ((current_control&RESET_)) {
  b8:	81 fd       	sbrc	r24, 1
  ba:	08 c0       	rjmp	.+16     	; 0xcc <main+0x50>
  bc:	11 c0       	rjmp	.+34     	; 0xe0 <main+0x64>
				for (uint8_t i=0; i<8; i++) REGISTER[i] = 0;
  be:	e8 2f       	mov	r30, r24
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	e0 5a       	subi	r30, 0xA0	; 160
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	10 82       	st	Z, r1
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	01 c0       	rjmp	.+2      	; 0xce <main+0x52>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	b0 f3       	brcs	.-20     	; 0xbe <main+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	87 e8       	ldi	r24, 0x87	; 135
  d4:	93 e1       	ldi	r25, 0x13	; 19
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x5a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x60>
  dc:	00 00       	nop
				_delay_ms(20);
				continue;
  de:	da cf       	rjmp	.-76     	; 0x94 <main+0x18>
			}
			PORTC = (REGISTER[(src>>4)&0b00000111]<<4) | (REGISTER[src&0b00000111]);   //src reg 1 er value ar 2 er value copied
  e0:	25 2f       	mov	r18, r21
  e2:	22 95       	swap	r18
  e4:	2f 70       	andi	r18, 0x0F	; 15
  e6:	27 70       	andi	r18, 0x07	; 7
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	e0 5a       	subi	r30, 0xA0	; 160
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	e0 81       	ld	r30, Z
  f2:	90 e1       	ldi	r25, 0x10	; 16
  f4:	e9 9f       	mul	r30, r25
  f6:	f0 01       	movw	r30, r0
  f8:	11 24       	eor	r1, r1
  fa:	65 2f       	mov	r22, r21
  fc:	67 70       	andi	r22, 0x07	; 7
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	db 01       	movw	r26, r22
 102:	a0 5a       	subi	r26, 0xA0	; 160
 104:	bf 4f       	sbci	r27, 0xFF	; 255
 106:	9c 91       	ld	r25, X
 108:	e9 2b       	or	r30, r25
 10a:	e5 bb       	out	0x15, r30	; 21
 10c:	ef e4       	ldi	r30, 0x4F	; 79
 10e:	f3 ec       	ldi	r31, 0xC3	; 195
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x94>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x9a>
 116:	00 00       	nop
			
			_delay_ms(200);
			dst_data = PINB;  //dstreg, writedata
 118:	a6 b3       	in	r26, 0x16	; 22
			if ((current_control&WRITE_REG_)==0x01) {
 11a:	80 ff       	sbrs	r24, 0
 11c:	0f c0       	rjmp	.+30     	; 0x13c <main+0xc0>
				REGISTER[dst_data&0b00000111] = (dst_data>>4);  //write data on dst reg
 11e:	ea 2f       	mov	r30, r26
 120:	e7 70       	andi	r30, 0x07	; 7
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	e0 5a       	subi	r30, 0xA0	; 160
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	8a 2f       	mov	r24, r26
 12a:	82 95       	swap	r24
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	80 83       	st	Z, r24
 130:	87 e8       	ldi	r24, 0x87	; 135
 132:	93 e1       	ldi	r25, 0x13	; 19
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0xb8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xbe>
 13a:	00 00       	nop
				//PORTD = dst_data & 0b11111100;
				_delay_ms(20);
			}
			PORTC = (REGISTER[(src>>4)&0b00000111]<<4) | (REGISTER[src&0b00000111]);
 13c:	f9 01       	movw	r30, r18
 13e:	e0 5a       	subi	r30, 0xA0	; 160
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	80 81       	ld	r24, Z
 144:	e0 e1       	ldi	r30, 0x10	; 16
 146:	8e 9f       	mul	r24, r30
 148:	c0 01       	movw	r24, r0
 14a:	11 24       	eor	r1, r1
 14c:	fb 01       	movw	r30, r22
 14e:	e0 5a       	subi	r30, 0xA0	; 160
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	90 81       	ld	r25, Z
 154:	89 2b       	or	r24, r25
 156:	85 bb       	out	0x15, r24	; 21
 158:	9d cf       	rjmp	.-198    	; 0x94 <main+0x18>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
